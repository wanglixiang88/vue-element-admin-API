<?xml version="1.0"?>
<doc>
    <assembly>
        <name>APIExample</name>
    </assembly>
    <members>
        <member name="P:APIExample.APIBusiness.UsersBusiness.Instance">
            <summary>
            单例
            </summary>
        </member>
        <member name="T:APIExample.APIControllers.UsersController">
            <summary>
            user
            </summary>
        </member>
        <member name="M:APIExample.APIControllers.UsersController.GetFansList(APIExample.APIControllers.UsersController.user)">
            <summary>
            获取粉丝/关注/浏览/访客列表
            </summary>
            <param name="req">请求的参数</param>
            <returns></returns>
        </member>
        <member name="T:APIExample.APIControllers.UsersController.user">
            <summary>
            
            </summary>
        </member>
        <member name="P:APIExample.APIControllers.UsersController.user.userId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:APIExample.APIControllers.UsersController.user.userName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:APIExample.APIControllers.UsersController.user.userHeadImg">
            <summary>
            头像
            </summary>
        </member>
        <member name="M:APIExample.APIControllers.UsersController.login(APIExample.APIControllers.userInfo)">
            <summary>
            
            </summary>
            <param name="aa"></param>
            <returns></returns>
        </member>
        <member name="M:APIExample.APIControllers.UsersController.info(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:APIExample.APIControllers.UsersController.getUserList(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:APIExample.SwaggerConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:APIExample.SwaggerConfig.Register">
            <summary>
            
            </summary>
        </member>
        <member name="T:APIExample.CachingSwaggerProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:APIExample.CachingSwaggerProvider.#ctor(Swashbuckle.Swagger.ISwaggerProvider)">
            <summary>
            
            </summary>
            <param name="swaggerProvider"></param>
        </member>
        <member name="M:APIExample.CachingSwaggerProvider.GetSwagger(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="rootUrl"></param>
            <param name="apiVersion"></param>
            <returns></returns>
        </member>
        <member name="M:APIExample.CachingSwaggerProvider.GetControllerDesc">
            <summary>
            从API文档中读取控制器描述
            </summary>
            <returns>所有控制器描述</returns>
        </member>
        <member name="T:APIExample.WebApiConfig.JsonContentNegotiator">
            <summary>
            
            </summary>
        </member>
        <member name="M:APIExample.WebApiConfig.JsonContentNegotiator.#ctor(System.Net.Http.Formatting.JsonMediaTypeFormatter)">
            <summary>
            
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:APIExample.WebApiConfig.JsonContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="request"></param>
            <param name="formatters"></param>
            <returns></returns>
        </member>
        <member name="P:APIExample.Engine.CommonResult`1.bSucceed">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="T:APIExample.CommonAPIResult`1">
            <summary>
            响应
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:APIExample.CommonAPIResult`1.code">
            <summary>
            错误代码  
            1000--正常  1001--调用失败  1002--数据不存在（包括登录用户不存在） 1003-token不存在  1004--token已失效  1005--数据重复提交  1011--用户金币不足
            2001--参数错误
            3001--接口访问时间限制
            4000--redis操作失败
            9999--未知异常
            </summary>
        </member>
        <member name="P:APIExample.CommonAPIResult`1.errMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:APIExample.CommonAPIResult`1.data">
            <summary>
            返回值实体
            </summary>
        </member>
        <member name="M:APIExample.CommonAPIResult`1.UpdateStatus(`0,APIExample.Models.MessageDict,System.String)">
            <summary>
            接口统一返回消息
            </summary>
            <param name="result"></param>
            <param name="messageDict"></param>
            <param name="errMsg"></param>
        </member>
        <member name="M:APIExample.CommonAPIResult`1.CopyTo``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:APIExample.OrderResult`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:APIExample.OrderResult`1.afterStatus">
            <summary>
            操作完成后订单状态
            </summary>
        </member>
        <member name="P:APIExample.OrderResult`1.ordestatus">
            <summary>
            订单状态(中文显示)
            </summary>
        </member>
        <member name="T:APIExample.Common">
            <summary>
            
            </summary>
        </member>
        <member name="M:APIExample.Common.CopyTo``1(System.Object,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="T:APIExample.Filter.BasicAuthAttribute">
            <summary>
            接口统一入口
            </summary>
        </member>
        <member name="M:APIExample.Filter.BasicAuthAttribute.OnActionExecuting(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            
            </summary>
            <param name="actionContext"></param>
        </member>
        <member name="T:APIExample.Filter.AuthFilterAttribute">
            <summary>
            接口访问统一入口
            </summary>
        </member>
        <member name="M:APIExample.Filter.AuthFilterAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            接口统一授权
            </summary>
            <param name="actionContext"></param>
        </member>
        <member name="T:APIExample.Models.MessageDict">
            <summary>
            ErrorCode
            </summary>
        </member>
        <member name="F:APIExample.Models.MessageDict.Ok">
            <summary>
            调用接口成功
            </summary>
        </member>
        <member name="F:APIExample.Models.MessageDict.Failed">
            <summary>
            调用失败
            </summary>
        </member>
        <member name="F:APIExample.Models.MessageDict.NoDataExists">
            <summary>
            数据不存在（包括登录用户不存在）
            </summary>
        </member>
        <member name="F:APIExample.Models.MessageDict.TokenNon">
            <summary>
            token不存在
            </summary>
        </member>
        <member name="F:APIExample.Models.MessageDict.TokenInvalid">
            <summary>
            token已失效
            </summary>
        </member>
        <member name="F:APIExample.Models.MessageDict.SubmitDuplicate">
            <summary>
            数据重复提交
            </summary>
        </member>
        <member name="F:APIExample.Models.MessageDict.DataExpire">
            <summary>
            数据过期
            </summary>
        </member>
        <member name="F:APIExample.Models.MessageDict.CreditsCoins">
            <summary>
            用户金币不足
            </summary>
        </member>
        <member name="F:APIExample.Models.MessageDict.PramError">
            <summary>
            参数错误
            </summary>
        </member>
        <member name="F:APIExample.Models.MessageDict.TimeStampExpired">
            <summary>
            接口访问时间限制
            </summary>
        </member>
        <member name="F:APIExample.Models.MessageDict.RedisError">
            <summary>
            redis操作失败
            </summary>
        </member>
        <member name="F:APIExample.Models.MessageDict.SystemUnkonw">
            <summary>
            未知异常
            </summary>
        </member>
        <member name="T:APIExample.Models.MobileBase">
            <summary>
            通用实体
            </summary>
        </member>
        <member name="P:APIExample.Models.MobileBase.token">
            <summary>
            通用Token
            </summary>
        </member>
        <member name="P:APIExample.Models.MobileBase.userid">
            <summary>
            userid(不暴露在接口中)
            </summary>
        </member>
        <member name="M:APIExample.Models.MobileBase.SetUserid(System.String)">
            <summary>
            设置userid
            </summary>
            <param name="id"></param>
        </member>
    </members>
</doc>
